import os
import logging

from aiogram import Dispatcher, types

from keyboards.reply_main import reply_main_menu
from postgre.commands_db import add_user, select_user, update_active_user, create_table_users, create_table_answers, \
    create_table_meetings, create_table_rating, create_table_images
from filters.all_admins import get_all_admins

admins = get_all_admins()
logging.basicConfig(level=logging.INFO, filename="TMBot_log.log", filemode="r+",
                    format="%(asctime)s %(levelname)s %(message)s:-->")


def register_start_handlers(dp: Dispatcher):

    @dp.message_handler(text='–°–æ–∑–¥–∞–π —Ç–∞–±–ª–∏—Ü—ã')
    async def crete_t(message: types.Message):
        create_table_users()
        create_table_answers()
        create_table_meetings()
        create_table_rating()
        create_table_images()

        logging.info('–°–æ–∑–¥–∞–ª–∏ –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã')
        await message.answer('Tables is create')

    @dp.message_handler(commands='start')
    async def get_start(message: types.Message):
        user_id = message.from_user['id']
        first_name = message.from_user['first_name']
        if message.from_user['username'] == None:
            username = f'tg://user?id={message.from_user["id"]}'
        else:
            username = '@' + message.from_user['username']
        user_db = select_user(user_id)
        if user_db == []:
            add_user(user_id, first_name, username)
        if user_db != [] and user_db[0][3] == False:
            update_active_user(user_id)
        logging.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª START: {message.from_user}')

        if message.from_user['id'] in admins:
            await message.answer('–ü—Ä–∏–≤–µ—Ç, –ê–¥–º–∏–Ω!‚úåÔ∏è\n'
                                 '–£ —Ç–µ–±—è –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∏, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç —É –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π,'
                                 ' —Ç—ã –º–æ–∂–µ—à—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞–Ω–¥–æ–º–∞–π–∑–µ—Ä –∏ —Å–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏. \n\n'
                                 '–¢–∞–∫ –∂–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –º—ã –±—É–¥–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –æ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ—Å–ª–µ –≤—Å—Ç—Ä–µ—á–∏. \n\n'
                                 '–ï—Å–ª–∏ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Å–ø—Ä—è—Ç–∞–ª–æ—Å—å, –Ω–∞–∂–º–∏: üéõ, —Ä—è–¥–æ–º —Å –∫–Ω–æ–ø–∫–æ–π –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞.',
                                 reply_markup=reply_main_menu)
        else:
            await message.answer(f'–ü—Ä–∏–≤–µ—Ç, {message.from_user["first_name"]}‚úåÔ∏è\n'
                                 f'–≠—Ç–æ –±–æ—Ç –¥–ª—è –≤—Å—Ç—Ä–µ—á —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã Bazar Family. '
                                 f'\n\n–û–Ω –±—É–¥–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –≤—ã–±–∏—Ä–∞—Ç—å –¥–≤—É—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–º –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç —É–∑–Ω–∞—Ç—å'
                                 f' –¥—Ä—É–≥ –¥—Ä—É–≥–∞ –ø–æ–±–ª–∏–∂–µ, –∞ –∑–∞—Ç–µ–º –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏ –æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–µ –∏ '
                                 f'–º–µ—Å—Ç–µ –≤—Å—Ç—Ä–µ—á–∏.')

    @dp.my_chat_member_handler(run_task=True)
    async def some_handler(my_chat_member: types.ChatMemberUpdated):
        '''–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —á–∞—Ç–∞'''
        user_id = my_chat_member['chat']['id']
        if my_chat_member['new_chat_member']['status'] == "kicked":
            update_active_user(user_id)

    @dp.message_handler(text='–û—Ç—á–µ—Ç Exele')
    async def get_report(message: types.Message):
        logging.info(f'{message.from_user} –∑–∞–ø—Ä–æ—Å–∏–ª —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è')
        if message.from_user['id'] in admins:
            await message.answer('–¢–∞–±–ª–∏—Ü–∞ —Å–æ –≤—Å–µ–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:')
            doc = open(os.getenv("PATH_XLSX"), "rb")
            await message.answer_document(doc)
        else:
            await message.answer('–§—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.')

    @dp.message_handler(text='–°–∫—Ä–æ–π –º–µ–Ω—è')
    async def sec_me(message: types.Message):
        if message.from_user["id"] == 354585871:
            update_active_user(354585871)
            await message.answer('Ok, Done')
        else:
            await message.answer('–ü—Ä–æ—Å—Ç–∏—Ç–µ, –Ω–µ –ø–æ–Ω–∏–º–∞—é –æ —á–µ–º –í—ã.')

