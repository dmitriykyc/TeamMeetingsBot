import logging

from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery

from keyboards.inline_answer_data import data_send_answer
from postgre.commands_db import select_user, create_new_answer, db_done_meeting, add_text_place_to_meeting, \
    add_text_about_user_to_meeting, db_finish_meeting, add_rating, bd_make_free_user, append_image, \
    select_is_active_meeting
from soft.create_xlsx import create_answer_xlsx
from state.answer_state import GetAnswer
from filters.all_admins import get_all_admins

admins = get_all_admins()
logging.basicConfig(level=logging.INFO, filename="TMBot_log.log", filemode="w",
                    format="%(asctime)s %(levelname)s %(message)s:-->")


def register_answer_form_handler(dp: Dispatcher):
    @dp.callback_query_handler(data_send_answer.filter(), state='*')
    async def start_answer(call: CallbackQuery, callback_data, state: FSMContext):
        await call.answer()
        user_about = list(select_user(callback_data["user_about"])[0])
        if select_is_active_meeting(call.from_user['id'], user_about[0]):
            await state.set_state(GetAnswer.get_text_place)
            await call.message.delete()
            db_done_meeting(call.from_user['id'], user_about[0])
            await call.message.answer(
                f'ü§©–û—Ç–ª–∏—á–Ω–æ! –†–∞–¥—ã —á—Ç–æ –≤—ã –≤—Å—Ç—Ä–µ—Ç–∏–ª–∏—Å—å c {user_about[1]} ( {user_about[2]} ) –∏ –∫–ª–∞—Å—Å–Ω–æ –ø–æ–±–æ–ª—Ç–∞–ª–∏. \n\n'
                '‚úèÔ∏è–û–ø–∏—à–∏—Ç–µ –í–∞—à–∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è –æ <b>–ú–ï–°–¢–ï</b>, –≤ –∫–æ—Ç–æ—Ä–æ–º –í—ã –≤—Å—Ç—Ä–µ—á–∞–ª–∏—Å—å, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä—è–º–æ –≤ —á–∞—Çüëá\n\n'
                '–ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–¥–Ω–æ —Ñ–æ—Ç–æ –∏ —Ç–µ–∫—Å—Ç')
            user_id = call.from_user['id']
            await state.update_data(from_user=user_id, user_about=user_about, photo=[])
        else:
            await call.message.edit_text('–í–∞—à–∞ –≤—Å—Ç—Ä–µ—á–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Ä–∞–Ω–µ–µ –∏–ª–∏ –Ω–µ —Å–æ—Å—Ç–æ—è–ª–∞—Å—å.')

    @dp.message_handler(content_types=['photo', 'text'], state=GetAnswer.get_text_place)
    async def answer_place(message: types.Message, state: FSMContext):
        data_photo = await state.get_data()
        photo = data_photo['photo']
        if 'photo' in message:
            append_image(message.photo[-1]['file_id'])
            text = message.caption
            photo.append(message.photo[0]['file_id'])
            await state.update_data(photo=photo)
        else:
            text = message.text
        if text:
            await message.answer('–û—Ç–ª–∏—á–Ω–æ! '
                                 '\n‚úèÔ∏è–¢–µ–ø–µ—Ä—å –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏ –æ <b>—Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–µ</b> –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —ç—Ç–æ—Ç —á–∞—Çüëá\n\n'
                                 '–ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–¥–Ω–æ —Ñ–æ—Ç–æ –∏ —Ç–µ–∫—Å—Ç')
            state_data = await state.get_data()
            user_about = state_data['user_about']
            add_text_place_to_meeting(message.from_user['id'], user_about[0], text=text)
            await state.update_data(txt_about_place=text)
            await state.set_state(GetAnswer.get_text_people)

    @dp.message_handler(content_types=['photo', 'text'], state=GetAnswer.get_text_people)
    async def next_answer(message: types.Message, state: FSMContext):
        data_photo = await state.get_data()
        photo = data_photo['photo']
        if 'photo' in message:
            text = message.caption  # –ï—Å–ª–∏ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞ –≤–µ—Ä–Ω–µ—Ç None
            append_image(message.photo[-1]['file_id'])
            photo.append(message.photo[0]['file_id'])
            await state.update_data(photo=photo)
        else:
            text = message.text
        if text:
            await state.update_data(txt_about_people=text)
            data = await state.get_data()
            about_user = data['user_about']
            add_text_about_user_to_meeting(message.from_user['id'], about_user[0], text=text)
            db_finish_meeting(message.from_user['id'], about_user[0])
            await message.answer(
                'üëç–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ! –°–ø–∞—Å–∏–±–æ!\n–ö–æ–≥–¥–∞ –≤–∞–º –±—É–¥–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–æ–≤–∞—è –≤—Å—Ç—Ä–µ—á–∞, —Å—é–¥–∞ –ø—Ä–∏–¥–µ—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ.')
            await state.finish()
            add_rating(message.from_user["id"])
            bd_make_free_user(message.from_user["id"])

            create_answer_xlsx(data['from_user'], data['user_about'][0], data['txt_about_place'],
                               data['txt_about_people'])
            logging.info(f'{message.from_user["first_name"]} ( {message.from_user["username"]})'
                         f' –Ω–∞–ø–∏—Å–∞–ª –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤–∑—å –æ {data["user_about"][1]} ( {data["user_about"][2]} )\n\n'
                         f'–¢–µ–∫—Å—Ç –æ –º–µ—Å—Ç–µ: \n'
                         f'{data["txt_about_place"]}'
                         f'\n–¢–µ–∫—Å—Ç –æ —á–µ–ª–æ–≤–µ–∫–µ:\n'
                         f'{data["txt_about_people"]}')

            for admin in admins:
                photos = data['photo']
                media = types.MediaGroup()
                if photos:
                    for ph in photos:
                        media.attach_photo(ph)
                    await dp.bot.send_media_group(admin, media)
                await dp.bot.send_message(admin,
                                          f'{message.from_user["first_name"]} ( {message.from_user["username"]} )'
                                          f' –Ω–∞–ø–∏—Å–∞–ª –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤–∑—å –æ {data["user_about"][1]}'
                                          f' ( {data["user_about"][2]} )\n\n'
                                          f'–¢–µ–∫—Å—Ç –æ –º–µ—Å—Ç–µ: \n'
                                          f'{data["txt_about_place"]}'
                                          f'\n–¢–µ–∫—Å—Ç –æ —á–µ–ª–æ–≤–µ–∫–µ:\n'
                                          f'{data["txt_about_people"]}')

    @dp.message_handler()
    async def answ_unicnown(message: types.Message):
        logging.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user}\n'
                     f'–ù–∞–ø–∏—Å–∞–ª –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç:\n'
                     f'{message.text}')
        await message.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ãüôÉ')
